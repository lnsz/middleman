type Translator {
  id: ID! @id,
  endpoints: [Endpoint]! @relation(name: "EndpointsByTranslator", onDelete: CASCADE),
  requestFunction: String,
  responseFunction: String,
  tests: [Test] @relation(name: "TestsByTranslator", onDelete: CASCADE)
}

type Endpoint {
  id: ID! @id,
  translator: Translator! @relation(name: "EndpointsByTranslator", link: INLINE),
  type: RequestType!,
  url: String!,
  headers: [Header] @relation(name: "HeadersByEndpoint", onDelete: CASCADE),
  params: [Param] @relation(name: "ParamsByEndpoint", onDelete: CASCADE),
  body: String,
  apiKey: String
}

type Param {
  id: ID! @id,
  endpoint: Endpoint! @relation(name: "ParamsByEndpoint", link: INLINE),
  key: String!,
  value: String!
}

type Header {
  id: ID! @id,
  endpoint: Endpoint! @relation(name: "HeadersByEndpoint", link: INLINE)
  key: String!,
  value: String!
}

type Test {
  id: ID! @id,
  translator: Translator! @relation(name: "TestsByTranslator", link: INLINE),
  request: String!,
  expected: String!,
  runs: [Run] @relation(name: "RunsByTest", onDelete: CASCADE)
}

type Run {
  id: ID! @id,
  test: Test! @relation(name: "RunsByTest", link: INLINE),
  expected: String!,
  actual: String!,
  result: ResultType!
}

enum RequestType {
  GET, POST, PUT, DELETE
}

enum ResultType {
  Pass, Fail
}