/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Translator: TranslatorObject
      Endpoint: EndpointObject
      Test: TestObject
      Run: RunObject
      TranslatorConnection: TranslatorConnectionObject
      PageInfo: PageInfoObject
      TranslatorEdge: TranslatorEdgeObject
      AggregateTranslator: AggregateTranslatorObject
      EndpointConnection: EndpointConnectionObject
      EndpointEdge: EndpointEdgeObject
      AggregateEndpoint: AggregateEndpointObject
      TestConnection: TestConnectionObject
      TestEdge: TestEdgeObject
      AggregateTest: AggregateTestObject
      RunConnection: RunConnectionObject
      RunEdge: RunEdgeObject
      AggregateRun: AggregateRunObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      TranslatorSubscriptionPayload: TranslatorSubscriptionPayloadObject
      TranslatorPreviousValues: TranslatorPreviousValuesObject
      EndpointSubscriptionPayload: EndpointSubscriptionPayloadObject
      EndpointPreviousValues: EndpointPreviousValuesObject
      TestSubscriptionPayload: TestSubscriptionPayloadObject
      TestPreviousValues: TestPreviousValuesObject
      RunSubscriptionPayload: RunSubscriptionPayloadObject
      RunPreviousValues: RunPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Translator: TranslatorFieldDetails
      Endpoint: EndpointFieldDetails
      Test: TestFieldDetails
      Run: RunFieldDetails
      TranslatorConnection: TranslatorConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      TranslatorEdge: TranslatorEdgeFieldDetails
      AggregateTranslator: AggregateTranslatorFieldDetails
      EndpointConnection: EndpointConnectionFieldDetails
      EndpointEdge: EndpointEdgeFieldDetails
      AggregateEndpoint: AggregateEndpointFieldDetails
      TestConnection: TestConnectionFieldDetails
      TestEdge: TestEdgeFieldDetails
      AggregateTest: AggregateTestFieldDetails
      RunConnection: RunConnectionFieldDetails
      RunEdge: RunEdgeFieldDetails
      AggregateRun: AggregateRunFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      TranslatorSubscriptionPayload: TranslatorSubscriptionPayloadFieldDetails
      TranslatorPreviousValues: TranslatorPreviousValuesFieldDetails
      EndpointSubscriptionPayload: EndpointSubscriptionPayloadFieldDetails
      EndpointPreviousValues: EndpointPreviousValuesFieldDetails
      TestSubscriptionPayload: TestSubscriptionPayloadFieldDetails
      TestPreviousValues: TestPreviousValuesFieldDetails
      RunSubscriptionPayload: RunSubscriptionPayloadFieldDetails
      RunPreviousValues: RunPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      TranslatorWhereUniqueInput: TranslatorWhereUniqueInputInputObject
      EndpointWhereInput: EndpointWhereInputInputObject
      TranslatorWhereInput: TranslatorWhereInputInputObject
      TestWhereInput: TestWhereInputInputObject
      RunWhereInput: RunWhereInputInputObject
      EndpointWhereUniqueInput: EndpointWhereUniqueInputInputObject
      TestWhereUniqueInput: TestWhereUniqueInputInputObject
      RunWhereUniqueInput: RunWhereUniqueInputInputObject
      TranslatorCreateInput: TranslatorCreateInputInputObject
      EndpointCreateManyWithoutTranslatorInput: EndpointCreateManyWithoutTranslatorInputInputObject
      EndpointCreateWithoutTranslatorInput: EndpointCreateWithoutTranslatorInputInputObject
      TestCreateManyWithoutTranslatorInput: TestCreateManyWithoutTranslatorInputInputObject
      TestCreateWithoutTranslatorInput: TestCreateWithoutTranslatorInputInputObject
      RunCreateManyWithoutTestInput: RunCreateManyWithoutTestInputInputObject
      RunCreateWithoutTestInput: RunCreateWithoutTestInputInputObject
      TranslatorUpdateInput: TranslatorUpdateInputInputObject
      EndpointUpdateManyWithoutTranslatorInput: EndpointUpdateManyWithoutTranslatorInputInputObject
      EndpointUpdateWithWhereUniqueWithoutTranslatorInput: EndpointUpdateWithWhereUniqueWithoutTranslatorInputInputObject
      EndpointUpdateWithoutTranslatorDataInput: EndpointUpdateWithoutTranslatorDataInputInputObject
      EndpointUpsertWithWhereUniqueWithoutTranslatorInput: EndpointUpsertWithWhereUniqueWithoutTranslatorInputInputObject
      EndpointScalarWhereInput: EndpointScalarWhereInputInputObject
      EndpointUpdateManyWithWhereNestedInput: EndpointUpdateManyWithWhereNestedInputInputObject
      EndpointUpdateManyDataInput: EndpointUpdateManyDataInputInputObject
      TestUpdateManyWithoutTranslatorInput: TestUpdateManyWithoutTranslatorInputInputObject
      TestUpdateWithWhereUniqueWithoutTranslatorInput: TestUpdateWithWhereUniqueWithoutTranslatorInputInputObject
      TestUpdateWithoutTranslatorDataInput: TestUpdateWithoutTranslatorDataInputInputObject
      RunUpdateManyWithoutTestInput: RunUpdateManyWithoutTestInputInputObject
      RunUpdateWithWhereUniqueWithoutTestInput: RunUpdateWithWhereUniqueWithoutTestInputInputObject
      RunUpdateWithoutTestDataInput: RunUpdateWithoutTestDataInputInputObject
      RunUpsertWithWhereUniqueWithoutTestInput: RunUpsertWithWhereUniqueWithoutTestInputInputObject
      RunScalarWhereInput: RunScalarWhereInputInputObject
      RunUpdateManyWithWhereNestedInput: RunUpdateManyWithWhereNestedInputInputObject
      RunUpdateManyDataInput: RunUpdateManyDataInputInputObject
      TestUpsertWithWhereUniqueWithoutTranslatorInput: TestUpsertWithWhereUniqueWithoutTranslatorInputInputObject
      TestScalarWhereInput: TestScalarWhereInputInputObject
      TestUpdateManyWithWhereNestedInput: TestUpdateManyWithWhereNestedInputInputObject
      TestUpdateManyDataInput: TestUpdateManyDataInputInputObject
      TranslatorUpdateManyMutationInput: TranslatorUpdateManyMutationInputInputObject
      EndpointCreateInput: EndpointCreateInputInputObject
      TranslatorCreateOneWithoutEndpointsInput: TranslatorCreateOneWithoutEndpointsInputInputObject
      TranslatorCreateWithoutEndpointsInput: TranslatorCreateWithoutEndpointsInputInputObject
      EndpointUpdateInput: EndpointUpdateInputInputObject
      TranslatorUpdateOneRequiredWithoutEndpointsInput: TranslatorUpdateOneRequiredWithoutEndpointsInputInputObject
      TranslatorUpdateWithoutEndpointsDataInput: TranslatorUpdateWithoutEndpointsDataInputInputObject
      TranslatorUpsertWithoutEndpointsInput: TranslatorUpsertWithoutEndpointsInputInputObject
      EndpointUpdateManyMutationInput: EndpointUpdateManyMutationInputInputObject
      TestCreateInput: TestCreateInputInputObject
      TranslatorCreateOneWithoutTestsInput: TranslatorCreateOneWithoutTestsInputInputObject
      TranslatorCreateWithoutTestsInput: TranslatorCreateWithoutTestsInputInputObject
      TestUpdateInput: TestUpdateInputInputObject
      TranslatorUpdateOneRequiredWithoutTestsInput: TranslatorUpdateOneRequiredWithoutTestsInputInputObject
      TranslatorUpdateWithoutTestsDataInput: TranslatorUpdateWithoutTestsDataInputInputObject
      TranslatorUpsertWithoutTestsInput: TranslatorUpsertWithoutTestsInputInputObject
      TestUpdateManyMutationInput: TestUpdateManyMutationInputInputObject
      RunCreateInput: RunCreateInputInputObject
      TestCreateOneWithoutRunsInput: TestCreateOneWithoutRunsInputInputObject
      TestCreateWithoutRunsInput: TestCreateWithoutRunsInputInputObject
      RunUpdateInput: RunUpdateInputInputObject
      TestUpdateOneRequiredWithoutRunsInput: TestUpdateOneRequiredWithoutRunsInputInputObject
      TestUpdateWithoutRunsDataInput: TestUpdateWithoutRunsDataInputInputObject
      TestUpsertWithoutRunsInput: TestUpsertWithoutRunsInputInputObject
      RunUpdateManyMutationInput: RunUpdateManyMutationInputInputObject
      TranslatorSubscriptionWhereInput: TranslatorSubscriptionWhereInputInputObject
      EndpointSubscriptionWhereInput: EndpointSubscriptionWhereInputInputObject
      TestSubscriptionWhereInput: TestSubscriptionWhereInputInputObject
      RunSubscriptionWhereInput: RunSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    ResultType: ResultTypeValues,
    RequestType: RequestTypeValues,
    EndpointOrderByInput: EndpointOrderByInputValues,
    TestOrderByInput: TestOrderByInputValues,
    RunOrderByInput: RunOrderByInputValues,
    TranslatorOrderByInput: TranslatorOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'translator', args?: QueryTranslatorArgs[] | false, alias?: string  } 
  | { name: 'translators', args?: QueryTranslatorsArgs[] | false, alias?: string  } 
  | { name: 'translatorsConnection', args?: QueryTranslatorsConnectionArgs[] | false, alias?: string  } 
  | { name: 'endpoint', args?: QueryEndpointArgs[] | false, alias?: string  } 
  | { name: 'endpoints', args?: QueryEndpointsArgs[] | false, alias?: string  } 
  | { name: 'endpointsConnection', args?: QueryEndpointsConnectionArgs[] | false, alias?: string  } 
  | { name: 'test', args?: QueryTestArgs[] | false, alias?: string  } 
  | { name: 'tests', args?: QueryTestsArgs[] | false, alias?: string  } 
  | { name: 'testsConnection', args?: QueryTestsConnectionArgs[] | false, alias?: string  } 
  | { name: 'run', args?: QueryRunArgs[] | false, alias?: string  } 
  | { name: 'runs', args?: QueryRunsArgs[] | false, alias?: string  } 
  | { name: 'runsConnection', args?: QueryRunsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'translator'
  | 'translators'
  | 'translatorsConnection'
  | 'endpoint'
  | 'endpoints'
  | 'endpointsConnection'
  | 'test'
  | 'tests'
  | 'testsConnection'
  | 'run'
  | 'runs'
  | 'runsConnection'


type QueryTranslatorArgs =
  | 'where'
type QueryTranslatorsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTranslatorsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEndpointArgs =
  | 'where'
type QueryEndpointsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEndpointsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTestArgs =
  | 'where'
type QueryTestsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTestsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRunArgs =
  | 'where'
type QueryRunsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRunsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  translator: {
    type: 'Translator'
    args: Record<QueryTranslatorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TranslatorWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Translator | null> | prisma.Translator | null
  }
  translators: {
    type: 'Translator'
    args: Record<QueryTranslatorsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TranslatorWhereInput | null, orderBy?: prisma.TranslatorOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Translator[]> | prisma.Translator[]
  }
  translatorsConnection: {
    type: 'TranslatorConnection'
    args: Record<QueryTranslatorsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TranslatorWhereInput | null, orderBy?: prisma.TranslatorOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TranslatorConnection> | prisma.TranslatorConnection
  }
  endpoint: {
    type: 'Endpoint'
    args: Record<QueryEndpointArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EndpointWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Endpoint | null> | prisma.Endpoint | null
  }
  endpoints: {
    type: 'Endpoint'
    args: Record<QueryEndpointsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EndpointWhereInput | null, orderBy?: prisma.EndpointOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Endpoint[]> | prisma.Endpoint[]
  }
  endpointsConnection: {
    type: 'EndpointConnection'
    args: Record<QueryEndpointsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EndpointWhereInput | null, orderBy?: prisma.EndpointOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndpointConnection> | prisma.EndpointConnection
  }
  test: {
    type: 'Test'
    args: Record<QueryTestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TestWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Test | null> | prisma.Test | null
  }
  tests: {
    type: 'Test'
    args: Record<QueryTestsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TestWhereInput | null, orderBy?: prisma.TestOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Test[]> | prisma.Test[]
  }
  testsConnection: {
    type: 'TestConnection'
    args: Record<QueryTestsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TestWhereInput | null, orderBy?: prisma.TestOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TestConnection> | prisma.TestConnection
  }
  run: {
    type: 'Run'
    args: Record<QueryRunArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: RunWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Run | null> | prisma.Run | null
  }
  runs: {
    type: 'Run'
    args: Record<QueryRunsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RunWhereInput | null, orderBy?: prisma.RunOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Run[]> | prisma.Run[]
  }
  runsConnection: {
    type: 'RunConnection'
    args: Record<QueryRunsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RunWhereInput | null, orderBy?: prisma.RunOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RunConnection> | prisma.RunConnection
  }
}
  

// Types for Translator

type TranslatorObject =
  | TranslatorFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'endpoints', args?: TranslatorEndpointsArgs[] | false, alias?: string  } 
  | { name: 'requestFunction', args?: [] | false, alias?: string  } 
  | { name: 'responseFunction', args?: [] | false, alias?: string  } 
  | { name: 'tests', args?: TranslatorTestsArgs[] | false, alias?: string  } 

type TranslatorFields =
  | 'id'
  | 'endpoints'
  | 'requestFunction'
  | 'responseFunction'
  | 'tests'


type TranslatorEndpointsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type TranslatorTestsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TranslatorFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  endpoints: {
    type: 'Endpoint'
    args: Record<TranslatorEndpointsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Translator">,
      args: { where?: EndpointWhereInput | null, orderBy?: prisma.EndpointOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Endpoint[]> | prisma.Endpoint[]
  }
  requestFunction: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  responseFunction: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  tests: {
    type: 'Test'
    args: Record<TranslatorTestsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Translator">,
      args: { where?: TestWhereInput | null, orderBy?: prisma.TestOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Test[]> | prisma.Test[]
  }
}
  

// Types for Endpoint

type EndpointObject =
  | EndpointFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'translator', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 

type EndpointFields =
  | 'id'
  | 'translator'
  | 'type'
  | 'url'



  

export interface EndpointFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  translator: {
    type: 'Translator'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Endpoint">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Translator> | prisma.Translator
  }
  type: {
    type: 'RequestType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Endpoint">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RequestType> | prisma.RequestType
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Test

type TestObject =
  | TestFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'translator', args?: [] | false, alias?: string  } 
  | { name: 'request', args?: [] | false, alias?: string  } 
  | { name: 'expected', args?: [] | false, alias?: string  } 
  | { name: 'runs', args?: TestRunsArgs[] | false, alias?: string  } 

type TestFields =
  | 'id'
  | 'translator'
  | 'request'
  | 'expected'
  | 'runs'


type TestRunsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TestFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  translator: {
    type: 'Translator'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Test">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Translator> | prisma.Translator
  }
  request: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  expected: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  runs: {
    type: 'Run'
    args: Record<TestRunsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Test">,
      args: { where?: RunWhereInput | null, orderBy?: prisma.RunOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Run[]> | prisma.Run[]
  }
}
  

// Types for Run

type RunObject =
  | RunFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'test', args?: [] | false, alias?: string  } 
  | { name: 'expected', args?: [] | false, alias?: string  } 
  | { name: 'actual', args?: [] | false, alias?: string  } 
  | { name: 'result', args?: [] | false, alias?: string  } 

type RunFields =
  | 'id'
  | 'test'
  | 'expected'
  | 'actual'
  | 'result'



  

export interface RunFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  test: {
    type: 'Test'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Run">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Test> | prisma.Test
  }
  expected: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  actual: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  result: {
    type: 'ResultType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Run">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResultType> | prisma.ResultType
  }
}
  

// Types for TranslatorConnection

type TranslatorConnectionObject =
  | TranslatorConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TranslatorConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TranslatorConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TranslatorConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TranslatorEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TranslatorConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TranslatorEdge[]> | prisma.TranslatorEdge[]
  }
  aggregate: {
    type: 'AggregateTranslator'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TranslatorConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTranslator> | prisma.AggregateTranslator
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TranslatorEdge

type TranslatorEdgeObject =
  | TranslatorEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TranslatorEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TranslatorEdgeFieldDetails {
  node: {
    type: 'Translator'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TranslatorEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Translator> | prisma.Translator
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTranslator

type AggregateTranslatorObject =
  | AggregateTranslatorFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTranslatorFields =
  | 'count'



  

export interface AggregateTranslatorFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EndpointConnection

type EndpointConnectionObject =
  | EndpointConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EndpointConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EndpointConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EndpointConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EndpointEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EndpointConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndpointEdge[]> | prisma.EndpointEdge[]
  }
  aggregate: {
    type: 'AggregateEndpoint'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EndpointConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEndpoint> | prisma.AggregateEndpoint
  }
}
  

// Types for EndpointEdge

type EndpointEdgeObject =
  | EndpointEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EndpointEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EndpointEdgeFieldDetails {
  node: {
    type: 'Endpoint'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EndpointEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Endpoint> | prisma.Endpoint
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEndpoint

type AggregateEndpointObject =
  | AggregateEndpointFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEndpointFields =
  | 'count'



  

export interface AggregateEndpointFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TestConnection

type TestConnectionObject =
  | TestConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TestConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TestConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TestConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TestEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TestConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TestEdge[]> | prisma.TestEdge[]
  }
  aggregate: {
    type: 'AggregateTest'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TestConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTest> | prisma.AggregateTest
  }
}
  

// Types for TestEdge

type TestEdgeObject =
  | TestEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TestEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TestEdgeFieldDetails {
  node: {
    type: 'Test'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TestEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Test> | prisma.Test
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTest

type AggregateTestObject =
  | AggregateTestFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTestFields =
  | 'count'



  

export interface AggregateTestFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RunConnection

type RunConnectionObject =
  | RunConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type RunConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface RunConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RunConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'RunEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"RunConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RunEdge[]> | prisma.RunEdge[]
  }
  aggregate: {
    type: 'AggregateRun'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RunConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateRun> | prisma.AggregateRun
  }
}
  

// Types for RunEdge

type RunEdgeObject =
  | RunEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type RunEdgeFields =
  | 'node'
  | 'cursor'



  

export interface RunEdgeFieldDetails {
  node: {
    type: 'Run'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RunEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Run> | prisma.Run
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateRun

type AggregateRunObject =
  | AggregateRunFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateRunFields =
  | 'count'



  

export interface AggregateRunFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createTranslator', args?: MutationCreateTranslatorArgs[] | false, alias?: string  } 
  | { name: 'updateTranslator', args?: MutationUpdateTranslatorArgs[] | false, alias?: string  } 
  | { name: 'updateManyTranslators', args?: MutationUpdateManyTranslatorsArgs[] | false, alias?: string  } 
  | { name: 'upsertTranslator', args?: MutationUpsertTranslatorArgs[] | false, alias?: string  } 
  | { name: 'deleteTranslator', args?: MutationDeleteTranslatorArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTranslators', args?: MutationDeleteManyTranslatorsArgs[] | false, alias?: string  } 
  | { name: 'createEndpoint', args?: MutationCreateEndpointArgs[] | false, alias?: string  } 
  | { name: 'updateEndpoint', args?: MutationUpdateEndpointArgs[] | false, alias?: string  } 
  | { name: 'updateManyEndpoints', args?: MutationUpdateManyEndpointsArgs[] | false, alias?: string  } 
  | { name: 'upsertEndpoint', args?: MutationUpsertEndpointArgs[] | false, alias?: string  } 
  | { name: 'deleteEndpoint', args?: MutationDeleteEndpointArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEndpoints', args?: MutationDeleteManyEndpointsArgs[] | false, alias?: string  } 
  | { name: 'createTest', args?: MutationCreateTestArgs[] | false, alias?: string  } 
  | { name: 'updateTest', args?: MutationUpdateTestArgs[] | false, alias?: string  } 
  | { name: 'updateManyTests', args?: MutationUpdateManyTestsArgs[] | false, alias?: string  } 
  | { name: 'upsertTest', args?: MutationUpsertTestArgs[] | false, alias?: string  } 
  | { name: 'deleteTest', args?: MutationDeleteTestArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTests', args?: MutationDeleteManyTestsArgs[] | false, alias?: string  } 
  | { name: 'createRun', args?: MutationCreateRunArgs[] | false, alias?: string  } 
  | { name: 'updateRun', args?: MutationUpdateRunArgs[] | false, alias?: string  } 
  | { name: 'updateManyRuns', args?: MutationUpdateManyRunsArgs[] | false, alias?: string  } 
  | { name: 'upsertRun', args?: MutationUpsertRunArgs[] | false, alias?: string  } 
  | { name: 'deleteRun', args?: MutationDeleteRunArgs[] | false, alias?: string  } 
  | { name: 'deleteManyRuns', args?: MutationDeleteManyRunsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createTranslator'
  | 'updateTranslator'
  | 'updateManyTranslators'
  | 'upsertTranslator'
  | 'deleteTranslator'
  | 'deleteManyTranslators'
  | 'createEndpoint'
  | 'updateEndpoint'
  | 'updateManyEndpoints'
  | 'upsertEndpoint'
  | 'deleteEndpoint'
  | 'deleteManyEndpoints'
  | 'createTest'
  | 'updateTest'
  | 'updateManyTests'
  | 'upsertTest'
  | 'deleteTest'
  | 'deleteManyTests'
  | 'createRun'
  | 'updateRun'
  | 'updateManyRuns'
  | 'upsertRun'
  | 'deleteRun'
  | 'deleteManyRuns'


type MutationCreateTranslatorArgs =
  | 'data'
type MutationUpdateTranslatorArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTranslatorsArgs =
  | 'data'
  | 'where'
type MutationUpsertTranslatorArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTranslatorArgs =
  | 'where'
type MutationDeleteManyTranslatorsArgs =
  | 'where'
type MutationCreateEndpointArgs =
  | 'data'
type MutationUpdateEndpointArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEndpointsArgs =
  | 'data'
  | 'where'
type MutationUpsertEndpointArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEndpointArgs =
  | 'where'
type MutationDeleteManyEndpointsArgs =
  | 'where'
type MutationCreateTestArgs =
  | 'data'
type MutationUpdateTestArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTestsArgs =
  | 'data'
  | 'where'
type MutationUpsertTestArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTestArgs =
  | 'where'
type MutationDeleteManyTestsArgs =
  | 'where'
type MutationCreateRunArgs =
  | 'data'
type MutationUpdateRunArgs =
  | 'data'
  | 'where'
type MutationUpdateManyRunsArgs =
  | 'data'
  | 'where'
type MutationUpsertRunArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteRunArgs =
  | 'where'
type MutationDeleteManyRunsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createTranslator: {
    type: 'Translator'
    args: Record<MutationCreateTranslatorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TranslatorCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Translator> | prisma.Translator
  }
  updateTranslator: {
    type: 'Translator'
    args: Record<MutationUpdateTranslatorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TranslatorUpdateInput, where: TranslatorWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Translator | null> | prisma.Translator | null
  }
  updateManyTranslators: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTranslatorsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TranslatorUpdateManyMutationInput, where?: TranslatorWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTranslator: {
    type: 'Translator'
    args: Record<MutationUpsertTranslatorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TranslatorWhereUniqueInput, create: TranslatorCreateInput, update: TranslatorUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Translator> | prisma.Translator
  }
  deleteTranslator: {
    type: 'Translator'
    args: Record<MutationDeleteTranslatorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TranslatorWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Translator | null> | prisma.Translator | null
  }
  deleteManyTranslators: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTranslatorsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TranslatorWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createEndpoint: {
    type: 'Endpoint'
    args: Record<MutationCreateEndpointArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EndpointCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Endpoint> | prisma.Endpoint
  }
  updateEndpoint: {
    type: 'Endpoint'
    args: Record<MutationUpdateEndpointArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EndpointUpdateInput, where: EndpointWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Endpoint | null> | prisma.Endpoint | null
  }
  updateManyEndpoints: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEndpointsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EndpointUpdateManyMutationInput, where?: EndpointWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEndpoint: {
    type: 'Endpoint'
    args: Record<MutationUpsertEndpointArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EndpointWhereUniqueInput, create: EndpointCreateInput, update: EndpointUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Endpoint> | prisma.Endpoint
  }
  deleteEndpoint: {
    type: 'Endpoint'
    args: Record<MutationDeleteEndpointArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EndpointWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Endpoint | null> | prisma.Endpoint | null
  }
  deleteManyEndpoints: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEndpointsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EndpointWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTest: {
    type: 'Test'
    args: Record<MutationCreateTestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TestCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Test> | prisma.Test
  }
  updateTest: {
    type: 'Test'
    args: Record<MutationUpdateTestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TestUpdateInput, where: TestWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Test | null> | prisma.Test | null
  }
  updateManyTests: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTestsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TestUpdateManyMutationInput, where?: TestWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTest: {
    type: 'Test'
    args: Record<MutationUpsertTestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TestWhereUniqueInput, create: TestCreateInput, update: TestUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Test> | prisma.Test
  }
  deleteTest: {
    type: 'Test'
    args: Record<MutationDeleteTestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TestWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Test | null> | prisma.Test | null
  }
  deleteManyTests: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTestsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TestWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createRun: {
    type: 'Run'
    args: Record<MutationCreateRunArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RunCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Run> | prisma.Run
  }
  updateRun: {
    type: 'Run'
    args: Record<MutationUpdateRunArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RunUpdateInput, where: RunWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Run | null> | prisma.Run | null
  }
  updateManyRuns: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyRunsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RunUpdateManyMutationInput, where?: RunWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertRun: {
    type: 'Run'
    args: Record<MutationUpsertRunArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RunWhereUniqueInput, create: RunCreateInput, update: RunUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Run> | prisma.Run
  }
  deleteRun: {
    type: 'Run'
    args: Record<MutationDeleteRunArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RunWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Run | null> | prisma.Run | null
  }
  deleteManyRuns: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyRunsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: RunWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'translator', args?: SubscriptionTranslatorArgs[] | false, alias?: string  } 
  | { name: 'endpoint', args?: SubscriptionEndpointArgs[] | false, alias?: string  } 
  | { name: 'test', args?: SubscriptionTestArgs[] | false, alias?: string  } 
  | { name: 'run', args?: SubscriptionRunArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'translator'
  | 'endpoint'
  | 'test'
  | 'run'


type SubscriptionTranslatorArgs =
  | 'where'
type SubscriptionEndpointArgs =
  | 'where'
type SubscriptionTestArgs =
  | 'where'
type SubscriptionRunArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  translator: {
    type: 'TranslatorSubscriptionPayload'
    args: Record<SubscriptionTranslatorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TranslatorSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TranslatorSubscriptionPayload | null> | prisma.TranslatorSubscriptionPayload | null
  }
  endpoint: {
    type: 'EndpointSubscriptionPayload'
    args: Record<SubscriptionEndpointArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EndpointSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndpointSubscriptionPayload | null> | prisma.EndpointSubscriptionPayload | null
  }
  test: {
    type: 'TestSubscriptionPayload'
    args: Record<SubscriptionTestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TestSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TestSubscriptionPayload | null> | prisma.TestSubscriptionPayload | null
  }
  run: {
    type: 'RunSubscriptionPayload'
    args: Record<SubscriptionRunArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: RunSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RunSubscriptionPayload | null> | prisma.RunSubscriptionPayload | null
  }
}
  

// Types for TranslatorSubscriptionPayload

type TranslatorSubscriptionPayloadObject =
  | TranslatorSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TranslatorSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TranslatorSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TranslatorSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Translator'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TranslatorSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Translator | null> | prisma.Translator | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TranslatorPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TranslatorSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TranslatorPreviousValues | null> | prisma.TranslatorPreviousValues | null
  }
}
  

// Types for TranslatorPreviousValues

type TranslatorPreviousValuesObject =
  | TranslatorPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'requestFunction', args?: [] | false, alias?: string  } 
  | { name: 'responseFunction', args?: [] | false, alias?: string  } 

type TranslatorPreviousValuesFields =
  | 'id'
  | 'requestFunction'
  | 'responseFunction'



  

export interface TranslatorPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  requestFunction: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  responseFunction: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EndpointSubscriptionPayload

type EndpointSubscriptionPayloadObject =
  | EndpointSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EndpointSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EndpointSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EndpointSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Endpoint'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EndpointSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Endpoint | null> | prisma.Endpoint | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EndpointPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EndpointSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndpointPreviousValues | null> | prisma.EndpointPreviousValues | null
  }
}
  

// Types for EndpointPreviousValues

type EndpointPreviousValuesObject =
  | EndpointPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 

type EndpointPreviousValuesFields =
  | 'id'
  | 'type'
  | 'url'



  

export interface EndpointPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'RequestType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EndpointPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RequestType> | prisma.RequestType
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TestSubscriptionPayload

type TestSubscriptionPayloadObject =
  | TestSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TestSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TestSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TestSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Test'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TestSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Test | null> | prisma.Test | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TestPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TestSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TestPreviousValues | null> | prisma.TestPreviousValues | null
  }
}
  

// Types for TestPreviousValues

type TestPreviousValuesObject =
  | TestPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'request', args?: [] | false, alias?: string  } 
  | { name: 'expected', args?: [] | false, alias?: string  } 

type TestPreviousValuesFields =
  | 'id'
  | 'request'
  | 'expected'



  

export interface TestPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  request: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  expected: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RunSubscriptionPayload

type RunSubscriptionPayloadObject =
  | RunSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type RunSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface RunSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RunSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Run'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RunSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Run | null> | prisma.Run | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'RunPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RunSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RunPreviousValues | null> | prisma.RunPreviousValues | null
  }
}
  

// Types for RunPreviousValues

type RunPreviousValuesObject =
  | RunPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'expected', args?: [] | false, alias?: string  } 
  | { name: 'actual', args?: [] | false, alias?: string  } 
  | { name: 'result', args?: [] | false, alias?: string  } 

type RunPreviousValuesFields =
  | 'id'
  | 'expected'
  | 'actual'
  | 'result'



  

export interface RunPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  expected: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  actual: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  result: {
    type: 'ResultType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RunPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResultType> | prisma.ResultType
  }
}
  


export interface TranslatorWhereUniqueInput {
  id?: string | null
}
export type TranslatorWhereUniqueInputInputObject =
  | Extract<keyof TranslatorWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EndpointWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  translator?: TranslatorWhereInput | null
  type?: prisma.RequestType | null
  type_not?: prisma.RequestType | null
  type_in?: prisma.RequestType[]
  type_not_in?: prisma.RequestType[]
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  AND?: EndpointWhereInput[]
  OR?: EndpointWhereInput[]
  NOT?: EndpointWhereInput[]
}
export type EndpointWhereInputInputObject =
  | Extract<keyof EndpointWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'translator', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TranslatorWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  endpoints_every?: EndpointWhereInput | null
  endpoints_some?: EndpointWhereInput | null
  endpoints_none?: EndpointWhereInput | null
  requestFunction?: string | null
  requestFunction_not?: string | null
  requestFunction_in?: string[]
  requestFunction_not_in?: string[]
  requestFunction_lt?: string | null
  requestFunction_lte?: string | null
  requestFunction_gt?: string | null
  requestFunction_gte?: string | null
  requestFunction_contains?: string | null
  requestFunction_not_contains?: string | null
  requestFunction_starts_with?: string | null
  requestFunction_not_starts_with?: string | null
  requestFunction_ends_with?: string | null
  requestFunction_not_ends_with?: string | null
  responseFunction?: string | null
  responseFunction_not?: string | null
  responseFunction_in?: string[]
  responseFunction_not_in?: string[]
  responseFunction_lt?: string | null
  responseFunction_lte?: string | null
  responseFunction_gt?: string | null
  responseFunction_gte?: string | null
  responseFunction_contains?: string | null
  responseFunction_not_contains?: string | null
  responseFunction_starts_with?: string | null
  responseFunction_not_starts_with?: string | null
  responseFunction_ends_with?: string | null
  responseFunction_not_ends_with?: string | null
  tests_every?: TestWhereInput | null
  tests_some?: TestWhereInput | null
  tests_none?: TestWhereInput | null
  AND?: TranslatorWhereInput[]
  OR?: TranslatorWhereInput[]
  NOT?: TranslatorWhereInput[]
}
export type TranslatorWhereInputInputObject =
  | Extract<keyof TranslatorWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'endpoints_every', alias?: string  } 
  | { name: 'endpoints_some', alias?: string  } 
  | { name: 'endpoints_none', alias?: string  } 
  | { name: 'requestFunction', alias?: string  } 
  | { name: 'requestFunction_not', alias?: string  } 
  | { name: 'requestFunction_in', alias?: string  } 
  | { name: 'requestFunction_not_in', alias?: string  } 
  | { name: 'requestFunction_lt', alias?: string  } 
  | { name: 'requestFunction_lte', alias?: string  } 
  | { name: 'requestFunction_gt', alias?: string  } 
  | { name: 'requestFunction_gte', alias?: string  } 
  | { name: 'requestFunction_contains', alias?: string  } 
  | { name: 'requestFunction_not_contains', alias?: string  } 
  | { name: 'requestFunction_starts_with', alias?: string  } 
  | { name: 'requestFunction_not_starts_with', alias?: string  } 
  | { name: 'requestFunction_ends_with', alias?: string  } 
  | { name: 'requestFunction_not_ends_with', alias?: string  } 
  | { name: 'responseFunction', alias?: string  } 
  | { name: 'responseFunction_not', alias?: string  } 
  | { name: 'responseFunction_in', alias?: string  } 
  | { name: 'responseFunction_not_in', alias?: string  } 
  | { name: 'responseFunction_lt', alias?: string  } 
  | { name: 'responseFunction_lte', alias?: string  } 
  | { name: 'responseFunction_gt', alias?: string  } 
  | { name: 'responseFunction_gte', alias?: string  } 
  | { name: 'responseFunction_contains', alias?: string  } 
  | { name: 'responseFunction_not_contains', alias?: string  } 
  | { name: 'responseFunction_starts_with', alias?: string  } 
  | { name: 'responseFunction_not_starts_with', alias?: string  } 
  | { name: 'responseFunction_ends_with', alias?: string  } 
  | { name: 'responseFunction_not_ends_with', alias?: string  } 
  | { name: 'tests_every', alias?: string  } 
  | { name: 'tests_some', alias?: string  } 
  | { name: 'tests_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TestWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  translator?: TranslatorWhereInput | null
  request?: string | null
  request_not?: string | null
  request_in?: string[]
  request_not_in?: string[]
  request_lt?: string | null
  request_lte?: string | null
  request_gt?: string | null
  request_gte?: string | null
  request_contains?: string | null
  request_not_contains?: string | null
  request_starts_with?: string | null
  request_not_starts_with?: string | null
  request_ends_with?: string | null
  request_not_ends_with?: string | null
  expected?: string | null
  expected_not?: string | null
  expected_in?: string[]
  expected_not_in?: string[]
  expected_lt?: string | null
  expected_lte?: string | null
  expected_gt?: string | null
  expected_gte?: string | null
  expected_contains?: string | null
  expected_not_contains?: string | null
  expected_starts_with?: string | null
  expected_not_starts_with?: string | null
  expected_ends_with?: string | null
  expected_not_ends_with?: string | null
  runs_every?: RunWhereInput | null
  runs_some?: RunWhereInput | null
  runs_none?: RunWhereInput | null
  AND?: TestWhereInput[]
  OR?: TestWhereInput[]
  NOT?: TestWhereInput[]
}
export type TestWhereInputInputObject =
  | Extract<keyof TestWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'translator', alias?: string  } 
  | { name: 'request', alias?: string  } 
  | { name: 'request_not', alias?: string  } 
  | { name: 'request_in', alias?: string  } 
  | { name: 'request_not_in', alias?: string  } 
  | { name: 'request_lt', alias?: string  } 
  | { name: 'request_lte', alias?: string  } 
  | { name: 'request_gt', alias?: string  } 
  | { name: 'request_gte', alias?: string  } 
  | { name: 'request_contains', alias?: string  } 
  | { name: 'request_not_contains', alias?: string  } 
  | { name: 'request_starts_with', alias?: string  } 
  | { name: 'request_not_starts_with', alias?: string  } 
  | { name: 'request_ends_with', alias?: string  } 
  | { name: 'request_not_ends_with', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  | { name: 'expected_not', alias?: string  } 
  | { name: 'expected_in', alias?: string  } 
  | { name: 'expected_not_in', alias?: string  } 
  | { name: 'expected_lt', alias?: string  } 
  | { name: 'expected_lte', alias?: string  } 
  | { name: 'expected_gt', alias?: string  } 
  | { name: 'expected_gte', alias?: string  } 
  | { name: 'expected_contains', alias?: string  } 
  | { name: 'expected_not_contains', alias?: string  } 
  | { name: 'expected_starts_with', alias?: string  } 
  | { name: 'expected_not_starts_with', alias?: string  } 
  | { name: 'expected_ends_with', alias?: string  } 
  | { name: 'expected_not_ends_with', alias?: string  } 
  | { name: 'runs_every', alias?: string  } 
  | { name: 'runs_some', alias?: string  } 
  | { name: 'runs_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RunWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  test?: TestWhereInput | null
  expected?: string | null
  expected_not?: string | null
  expected_in?: string[]
  expected_not_in?: string[]
  expected_lt?: string | null
  expected_lte?: string | null
  expected_gt?: string | null
  expected_gte?: string | null
  expected_contains?: string | null
  expected_not_contains?: string | null
  expected_starts_with?: string | null
  expected_not_starts_with?: string | null
  expected_ends_with?: string | null
  expected_not_ends_with?: string | null
  actual?: string | null
  actual_not?: string | null
  actual_in?: string[]
  actual_not_in?: string[]
  actual_lt?: string | null
  actual_lte?: string | null
  actual_gt?: string | null
  actual_gte?: string | null
  actual_contains?: string | null
  actual_not_contains?: string | null
  actual_starts_with?: string | null
  actual_not_starts_with?: string | null
  actual_ends_with?: string | null
  actual_not_ends_with?: string | null
  result?: prisma.ResultType | null
  result_not?: prisma.ResultType | null
  result_in?: prisma.ResultType[]
  result_not_in?: prisma.ResultType[]
  AND?: RunWhereInput[]
  OR?: RunWhereInput[]
  NOT?: RunWhereInput[]
}
export type RunWhereInputInputObject =
  | Extract<keyof RunWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'test', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  | { name: 'expected_not', alias?: string  } 
  | { name: 'expected_in', alias?: string  } 
  | { name: 'expected_not_in', alias?: string  } 
  | { name: 'expected_lt', alias?: string  } 
  | { name: 'expected_lte', alias?: string  } 
  | { name: 'expected_gt', alias?: string  } 
  | { name: 'expected_gte', alias?: string  } 
  | { name: 'expected_contains', alias?: string  } 
  | { name: 'expected_not_contains', alias?: string  } 
  | { name: 'expected_starts_with', alias?: string  } 
  | { name: 'expected_not_starts_with', alias?: string  } 
  | { name: 'expected_ends_with', alias?: string  } 
  | { name: 'expected_not_ends_with', alias?: string  } 
  | { name: 'actual', alias?: string  } 
  | { name: 'actual_not', alias?: string  } 
  | { name: 'actual_in', alias?: string  } 
  | { name: 'actual_not_in', alias?: string  } 
  | { name: 'actual_lt', alias?: string  } 
  | { name: 'actual_lte', alias?: string  } 
  | { name: 'actual_gt', alias?: string  } 
  | { name: 'actual_gte', alias?: string  } 
  | { name: 'actual_contains', alias?: string  } 
  | { name: 'actual_not_contains', alias?: string  } 
  | { name: 'actual_starts_with', alias?: string  } 
  | { name: 'actual_not_starts_with', alias?: string  } 
  | { name: 'actual_ends_with', alias?: string  } 
  | { name: 'actual_not_ends_with', alias?: string  } 
  | { name: 'result', alias?: string  } 
  | { name: 'result_not', alias?: string  } 
  | { name: 'result_in', alias?: string  } 
  | { name: 'result_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EndpointWhereUniqueInput {
  id?: string | null
}
export type EndpointWhereUniqueInputInputObject =
  | Extract<keyof EndpointWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TestWhereUniqueInput {
  id?: string | null
}
export type TestWhereUniqueInputInputObject =
  | Extract<keyof TestWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface RunWhereUniqueInput {
  id?: string | null
}
export type RunWhereUniqueInputInputObject =
  | Extract<keyof RunWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TranslatorCreateInput {
  id?: string | null
  endpoints?: EndpointCreateManyWithoutTranslatorInput | null
  requestFunction?: string | null
  responseFunction?: string | null
  tests?: TestCreateManyWithoutTranslatorInput | null
}
export type TranslatorCreateInputInputObject =
  | Extract<keyof TranslatorCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'endpoints', alias?: string  } 
  | { name: 'requestFunction', alias?: string  } 
  | { name: 'responseFunction', alias?: string  } 
  | { name: 'tests', alias?: string  } 
  
export interface EndpointCreateManyWithoutTranslatorInput {
  create?: EndpointCreateWithoutTranslatorInput[]
  connect?: EndpointWhereUniqueInput[]
}
export type EndpointCreateManyWithoutTranslatorInputInputObject =
  | Extract<keyof EndpointCreateManyWithoutTranslatorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EndpointCreateWithoutTranslatorInput {
  id?: string | null
  type?: prisma.RequestType
  url?: string
}
export type EndpointCreateWithoutTranslatorInputInputObject =
  | Extract<keyof EndpointCreateWithoutTranslatorInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface TestCreateManyWithoutTranslatorInput {
  create?: TestCreateWithoutTranslatorInput[]
  connect?: TestWhereUniqueInput[]
}
export type TestCreateManyWithoutTranslatorInputInputObject =
  | Extract<keyof TestCreateManyWithoutTranslatorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TestCreateWithoutTranslatorInput {
  id?: string | null
  request?: string
  expected?: string
  runs?: RunCreateManyWithoutTestInput | null
}
export type TestCreateWithoutTranslatorInputInputObject =
  | Extract<keyof TestCreateWithoutTranslatorInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'request', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  | { name: 'runs', alias?: string  } 
  
export interface RunCreateManyWithoutTestInput {
  create?: RunCreateWithoutTestInput[]
  connect?: RunWhereUniqueInput[]
}
export type RunCreateManyWithoutTestInputInputObject =
  | Extract<keyof RunCreateManyWithoutTestInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RunCreateWithoutTestInput {
  id?: string | null
  expected?: string
  actual?: string
  result?: prisma.ResultType
}
export type RunCreateWithoutTestInputInputObject =
  | Extract<keyof RunCreateWithoutTestInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  | { name: 'actual', alias?: string  } 
  | { name: 'result', alias?: string  } 
  
export interface TranslatorUpdateInput {
  endpoints?: EndpointUpdateManyWithoutTranslatorInput | null
  requestFunction?: string | null
  responseFunction?: string | null
  tests?: TestUpdateManyWithoutTranslatorInput | null
}
export type TranslatorUpdateInputInputObject =
  | Extract<keyof TranslatorUpdateInput, string>
  | { name: 'endpoints', alias?: string  } 
  | { name: 'requestFunction', alias?: string  } 
  | { name: 'responseFunction', alias?: string  } 
  | { name: 'tests', alias?: string  } 
  
export interface EndpointUpdateManyWithoutTranslatorInput {
  create?: EndpointCreateWithoutTranslatorInput[]
  delete?: EndpointWhereUniqueInput[]
  connect?: EndpointWhereUniqueInput[]
  set?: EndpointWhereUniqueInput[]
  disconnect?: EndpointWhereUniqueInput[]
  update?: EndpointUpdateWithWhereUniqueWithoutTranslatorInput[]
  upsert?: EndpointUpsertWithWhereUniqueWithoutTranslatorInput[]
  deleteMany?: EndpointScalarWhereInput[]
  updateMany?: EndpointUpdateManyWithWhereNestedInput[]
}
export type EndpointUpdateManyWithoutTranslatorInputInputObject =
  | Extract<keyof EndpointUpdateManyWithoutTranslatorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EndpointUpdateWithWhereUniqueWithoutTranslatorInput {
  where?: EndpointWhereUniqueInput
  data?: EndpointUpdateWithoutTranslatorDataInput
}
export type EndpointUpdateWithWhereUniqueWithoutTranslatorInputInputObject =
  | Extract<keyof EndpointUpdateWithWhereUniqueWithoutTranslatorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EndpointUpdateWithoutTranslatorDataInput {
  type?: prisma.RequestType | null
  url?: string | null
}
export type EndpointUpdateWithoutTranslatorDataInputInputObject =
  | Extract<keyof EndpointUpdateWithoutTranslatorDataInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface EndpointUpsertWithWhereUniqueWithoutTranslatorInput {
  where?: EndpointWhereUniqueInput
  update?: EndpointUpdateWithoutTranslatorDataInput
  create?: EndpointCreateWithoutTranslatorInput
}
export type EndpointUpsertWithWhereUniqueWithoutTranslatorInputInputObject =
  | Extract<keyof EndpointUpsertWithWhereUniqueWithoutTranslatorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EndpointScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  type?: prisma.RequestType | null
  type_not?: prisma.RequestType | null
  type_in?: prisma.RequestType[]
  type_not_in?: prisma.RequestType[]
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  AND?: EndpointScalarWhereInput[]
  OR?: EndpointScalarWhereInput[]
  NOT?: EndpointScalarWhereInput[]
}
export type EndpointScalarWhereInputInputObject =
  | Extract<keyof EndpointScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EndpointUpdateManyWithWhereNestedInput {
  where?: EndpointScalarWhereInput
  data?: EndpointUpdateManyDataInput
}
export type EndpointUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof EndpointUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EndpointUpdateManyDataInput {
  type?: prisma.RequestType | null
  url?: string | null
}
export type EndpointUpdateManyDataInputInputObject =
  | Extract<keyof EndpointUpdateManyDataInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface TestUpdateManyWithoutTranslatorInput {
  create?: TestCreateWithoutTranslatorInput[]
  delete?: TestWhereUniqueInput[]
  connect?: TestWhereUniqueInput[]
  set?: TestWhereUniqueInput[]
  disconnect?: TestWhereUniqueInput[]
  update?: TestUpdateWithWhereUniqueWithoutTranslatorInput[]
  upsert?: TestUpsertWithWhereUniqueWithoutTranslatorInput[]
  deleteMany?: TestScalarWhereInput[]
  updateMany?: TestUpdateManyWithWhereNestedInput[]
}
export type TestUpdateManyWithoutTranslatorInputInputObject =
  | Extract<keyof TestUpdateManyWithoutTranslatorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface TestUpdateWithWhereUniqueWithoutTranslatorInput {
  where?: TestWhereUniqueInput
  data?: TestUpdateWithoutTranslatorDataInput
}
export type TestUpdateWithWhereUniqueWithoutTranslatorInputInputObject =
  | Extract<keyof TestUpdateWithWhereUniqueWithoutTranslatorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TestUpdateWithoutTranslatorDataInput {
  request?: string | null
  expected?: string | null
  runs?: RunUpdateManyWithoutTestInput | null
}
export type TestUpdateWithoutTranslatorDataInputInputObject =
  | Extract<keyof TestUpdateWithoutTranslatorDataInput, string>
  | { name: 'request', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  | { name: 'runs', alias?: string  } 
  
export interface RunUpdateManyWithoutTestInput {
  create?: RunCreateWithoutTestInput[]
  delete?: RunWhereUniqueInput[]
  connect?: RunWhereUniqueInput[]
  set?: RunWhereUniqueInput[]
  disconnect?: RunWhereUniqueInput[]
  update?: RunUpdateWithWhereUniqueWithoutTestInput[]
  upsert?: RunUpsertWithWhereUniqueWithoutTestInput[]
  deleteMany?: RunScalarWhereInput[]
  updateMany?: RunUpdateManyWithWhereNestedInput[]
}
export type RunUpdateManyWithoutTestInputInputObject =
  | Extract<keyof RunUpdateManyWithoutTestInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface RunUpdateWithWhereUniqueWithoutTestInput {
  where?: RunWhereUniqueInput
  data?: RunUpdateWithoutTestDataInput
}
export type RunUpdateWithWhereUniqueWithoutTestInputInputObject =
  | Extract<keyof RunUpdateWithWhereUniqueWithoutTestInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface RunUpdateWithoutTestDataInput {
  expected?: string | null
  actual?: string | null
  result?: prisma.ResultType | null
}
export type RunUpdateWithoutTestDataInputInputObject =
  | Extract<keyof RunUpdateWithoutTestDataInput, string>
  | { name: 'expected', alias?: string  } 
  | { name: 'actual', alias?: string  } 
  | { name: 'result', alias?: string  } 
  
export interface RunUpsertWithWhereUniqueWithoutTestInput {
  where?: RunWhereUniqueInput
  update?: RunUpdateWithoutTestDataInput
  create?: RunCreateWithoutTestInput
}
export type RunUpsertWithWhereUniqueWithoutTestInputInputObject =
  | Extract<keyof RunUpsertWithWhereUniqueWithoutTestInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface RunScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  expected?: string | null
  expected_not?: string | null
  expected_in?: string[]
  expected_not_in?: string[]
  expected_lt?: string | null
  expected_lte?: string | null
  expected_gt?: string | null
  expected_gte?: string | null
  expected_contains?: string | null
  expected_not_contains?: string | null
  expected_starts_with?: string | null
  expected_not_starts_with?: string | null
  expected_ends_with?: string | null
  expected_not_ends_with?: string | null
  actual?: string | null
  actual_not?: string | null
  actual_in?: string[]
  actual_not_in?: string[]
  actual_lt?: string | null
  actual_lte?: string | null
  actual_gt?: string | null
  actual_gte?: string | null
  actual_contains?: string | null
  actual_not_contains?: string | null
  actual_starts_with?: string | null
  actual_not_starts_with?: string | null
  actual_ends_with?: string | null
  actual_not_ends_with?: string | null
  result?: prisma.ResultType | null
  result_not?: prisma.ResultType | null
  result_in?: prisma.ResultType[]
  result_not_in?: prisma.ResultType[]
  AND?: RunScalarWhereInput[]
  OR?: RunScalarWhereInput[]
  NOT?: RunScalarWhereInput[]
}
export type RunScalarWhereInputInputObject =
  | Extract<keyof RunScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  | { name: 'expected_not', alias?: string  } 
  | { name: 'expected_in', alias?: string  } 
  | { name: 'expected_not_in', alias?: string  } 
  | { name: 'expected_lt', alias?: string  } 
  | { name: 'expected_lte', alias?: string  } 
  | { name: 'expected_gt', alias?: string  } 
  | { name: 'expected_gte', alias?: string  } 
  | { name: 'expected_contains', alias?: string  } 
  | { name: 'expected_not_contains', alias?: string  } 
  | { name: 'expected_starts_with', alias?: string  } 
  | { name: 'expected_not_starts_with', alias?: string  } 
  | { name: 'expected_ends_with', alias?: string  } 
  | { name: 'expected_not_ends_with', alias?: string  } 
  | { name: 'actual', alias?: string  } 
  | { name: 'actual_not', alias?: string  } 
  | { name: 'actual_in', alias?: string  } 
  | { name: 'actual_not_in', alias?: string  } 
  | { name: 'actual_lt', alias?: string  } 
  | { name: 'actual_lte', alias?: string  } 
  | { name: 'actual_gt', alias?: string  } 
  | { name: 'actual_gte', alias?: string  } 
  | { name: 'actual_contains', alias?: string  } 
  | { name: 'actual_not_contains', alias?: string  } 
  | { name: 'actual_starts_with', alias?: string  } 
  | { name: 'actual_not_starts_with', alias?: string  } 
  | { name: 'actual_ends_with', alias?: string  } 
  | { name: 'actual_not_ends_with', alias?: string  } 
  | { name: 'result', alias?: string  } 
  | { name: 'result_not', alias?: string  } 
  | { name: 'result_in', alias?: string  } 
  | { name: 'result_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RunUpdateManyWithWhereNestedInput {
  where?: RunScalarWhereInput
  data?: RunUpdateManyDataInput
}
export type RunUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof RunUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface RunUpdateManyDataInput {
  expected?: string | null
  actual?: string | null
  result?: prisma.ResultType | null
}
export type RunUpdateManyDataInputInputObject =
  | Extract<keyof RunUpdateManyDataInput, string>
  | { name: 'expected', alias?: string  } 
  | { name: 'actual', alias?: string  } 
  | { name: 'result', alias?: string  } 
  
export interface TestUpsertWithWhereUniqueWithoutTranslatorInput {
  where?: TestWhereUniqueInput
  update?: TestUpdateWithoutTranslatorDataInput
  create?: TestCreateWithoutTranslatorInput
}
export type TestUpsertWithWhereUniqueWithoutTranslatorInputInputObject =
  | Extract<keyof TestUpsertWithWhereUniqueWithoutTranslatorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TestScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  request?: string | null
  request_not?: string | null
  request_in?: string[]
  request_not_in?: string[]
  request_lt?: string | null
  request_lte?: string | null
  request_gt?: string | null
  request_gte?: string | null
  request_contains?: string | null
  request_not_contains?: string | null
  request_starts_with?: string | null
  request_not_starts_with?: string | null
  request_ends_with?: string | null
  request_not_ends_with?: string | null
  expected?: string | null
  expected_not?: string | null
  expected_in?: string[]
  expected_not_in?: string[]
  expected_lt?: string | null
  expected_lte?: string | null
  expected_gt?: string | null
  expected_gte?: string | null
  expected_contains?: string | null
  expected_not_contains?: string | null
  expected_starts_with?: string | null
  expected_not_starts_with?: string | null
  expected_ends_with?: string | null
  expected_not_ends_with?: string | null
  AND?: TestScalarWhereInput[]
  OR?: TestScalarWhereInput[]
  NOT?: TestScalarWhereInput[]
}
export type TestScalarWhereInputInputObject =
  | Extract<keyof TestScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'request', alias?: string  } 
  | { name: 'request_not', alias?: string  } 
  | { name: 'request_in', alias?: string  } 
  | { name: 'request_not_in', alias?: string  } 
  | { name: 'request_lt', alias?: string  } 
  | { name: 'request_lte', alias?: string  } 
  | { name: 'request_gt', alias?: string  } 
  | { name: 'request_gte', alias?: string  } 
  | { name: 'request_contains', alias?: string  } 
  | { name: 'request_not_contains', alias?: string  } 
  | { name: 'request_starts_with', alias?: string  } 
  | { name: 'request_not_starts_with', alias?: string  } 
  | { name: 'request_ends_with', alias?: string  } 
  | { name: 'request_not_ends_with', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  | { name: 'expected_not', alias?: string  } 
  | { name: 'expected_in', alias?: string  } 
  | { name: 'expected_not_in', alias?: string  } 
  | { name: 'expected_lt', alias?: string  } 
  | { name: 'expected_lte', alias?: string  } 
  | { name: 'expected_gt', alias?: string  } 
  | { name: 'expected_gte', alias?: string  } 
  | { name: 'expected_contains', alias?: string  } 
  | { name: 'expected_not_contains', alias?: string  } 
  | { name: 'expected_starts_with', alias?: string  } 
  | { name: 'expected_not_starts_with', alias?: string  } 
  | { name: 'expected_ends_with', alias?: string  } 
  | { name: 'expected_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TestUpdateManyWithWhereNestedInput {
  where?: TestScalarWhereInput
  data?: TestUpdateManyDataInput
}
export type TestUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof TestUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TestUpdateManyDataInput {
  request?: string | null
  expected?: string | null
}
export type TestUpdateManyDataInputInputObject =
  | Extract<keyof TestUpdateManyDataInput, string>
  | { name: 'request', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  
export interface TranslatorUpdateManyMutationInput {
  requestFunction?: string | null
  responseFunction?: string | null
}
export type TranslatorUpdateManyMutationInputInputObject =
  | Extract<keyof TranslatorUpdateManyMutationInput, string>
  | { name: 'requestFunction', alias?: string  } 
  | { name: 'responseFunction', alias?: string  } 
  
export interface EndpointCreateInput {
  id?: string | null
  translator?: TranslatorCreateOneWithoutEndpointsInput
  type?: prisma.RequestType
  url?: string
}
export type EndpointCreateInputInputObject =
  | Extract<keyof EndpointCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'translator', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface TranslatorCreateOneWithoutEndpointsInput {
  create?: TranslatorCreateWithoutEndpointsInput | null
  connect?: TranslatorWhereUniqueInput | null
}
export type TranslatorCreateOneWithoutEndpointsInputInputObject =
  | Extract<keyof TranslatorCreateOneWithoutEndpointsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TranslatorCreateWithoutEndpointsInput {
  id?: string | null
  requestFunction?: string | null
  responseFunction?: string | null
  tests?: TestCreateManyWithoutTranslatorInput | null
}
export type TranslatorCreateWithoutEndpointsInputInputObject =
  | Extract<keyof TranslatorCreateWithoutEndpointsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'requestFunction', alias?: string  } 
  | { name: 'responseFunction', alias?: string  } 
  | { name: 'tests', alias?: string  } 
  
export interface EndpointUpdateInput {
  translator?: TranslatorUpdateOneRequiredWithoutEndpointsInput | null
  type?: prisma.RequestType | null
  url?: string | null
}
export type EndpointUpdateInputInputObject =
  | Extract<keyof EndpointUpdateInput, string>
  | { name: 'translator', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface TranslatorUpdateOneRequiredWithoutEndpointsInput {
  create?: TranslatorCreateWithoutEndpointsInput | null
  update?: TranslatorUpdateWithoutEndpointsDataInput | null
  upsert?: TranslatorUpsertWithoutEndpointsInput | null
  connect?: TranslatorWhereUniqueInput | null
}
export type TranslatorUpdateOneRequiredWithoutEndpointsInputInputObject =
  | Extract<keyof TranslatorUpdateOneRequiredWithoutEndpointsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TranslatorUpdateWithoutEndpointsDataInput {
  requestFunction?: string | null
  responseFunction?: string | null
  tests?: TestUpdateManyWithoutTranslatorInput | null
}
export type TranslatorUpdateWithoutEndpointsDataInputInputObject =
  | Extract<keyof TranslatorUpdateWithoutEndpointsDataInput, string>
  | { name: 'requestFunction', alias?: string  } 
  | { name: 'responseFunction', alias?: string  } 
  | { name: 'tests', alias?: string  } 
  
export interface TranslatorUpsertWithoutEndpointsInput {
  update?: TranslatorUpdateWithoutEndpointsDataInput
  create?: TranslatorCreateWithoutEndpointsInput
}
export type TranslatorUpsertWithoutEndpointsInputInputObject =
  | Extract<keyof TranslatorUpsertWithoutEndpointsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EndpointUpdateManyMutationInput {
  type?: prisma.RequestType | null
  url?: string | null
}
export type EndpointUpdateManyMutationInputInputObject =
  | Extract<keyof EndpointUpdateManyMutationInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface TestCreateInput {
  id?: string | null
  translator?: TranslatorCreateOneWithoutTestsInput
  request?: string
  expected?: string
  runs?: RunCreateManyWithoutTestInput | null
}
export type TestCreateInputInputObject =
  | Extract<keyof TestCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'translator', alias?: string  } 
  | { name: 'request', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  | { name: 'runs', alias?: string  } 
  
export interface TranslatorCreateOneWithoutTestsInput {
  create?: TranslatorCreateWithoutTestsInput | null
  connect?: TranslatorWhereUniqueInput | null
}
export type TranslatorCreateOneWithoutTestsInputInputObject =
  | Extract<keyof TranslatorCreateOneWithoutTestsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TranslatorCreateWithoutTestsInput {
  id?: string | null
  endpoints?: EndpointCreateManyWithoutTranslatorInput | null
  requestFunction?: string | null
  responseFunction?: string | null
}
export type TranslatorCreateWithoutTestsInputInputObject =
  | Extract<keyof TranslatorCreateWithoutTestsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'endpoints', alias?: string  } 
  | { name: 'requestFunction', alias?: string  } 
  | { name: 'responseFunction', alias?: string  } 
  
export interface TestUpdateInput {
  translator?: TranslatorUpdateOneRequiredWithoutTestsInput | null
  request?: string | null
  expected?: string | null
  runs?: RunUpdateManyWithoutTestInput | null
}
export type TestUpdateInputInputObject =
  | Extract<keyof TestUpdateInput, string>
  | { name: 'translator', alias?: string  } 
  | { name: 'request', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  | { name: 'runs', alias?: string  } 
  
export interface TranslatorUpdateOneRequiredWithoutTestsInput {
  create?: TranslatorCreateWithoutTestsInput | null
  update?: TranslatorUpdateWithoutTestsDataInput | null
  upsert?: TranslatorUpsertWithoutTestsInput | null
  connect?: TranslatorWhereUniqueInput | null
}
export type TranslatorUpdateOneRequiredWithoutTestsInputInputObject =
  | Extract<keyof TranslatorUpdateOneRequiredWithoutTestsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TranslatorUpdateWithoutTestsDataInput {
  endpoints?: EndpointUpdateManyWithoutTranslatorInput | null
  requestFunction?: string | null
  responseFunction?: string | null
}
export type TranslatorUpdateWithoutTestsDataInputInputObject =
  | Extract<keyof TranslatorUpdateWithoutTestsDataInput, string>
  | { name: 'endpoints', alias?: string  } 
  | { name: 'requestFunction', alias?: string  } 
  | { name: 'responseFunction', alias?: string  } 
  
export interface TranslatorUpsertWithoutTestsInput {
  update?: TranslatorUpdateWithoutTestsDataInput
  create?: TranslatorCreateWithoutTestsInput
}
export type TranslatorUpsertWithoutTestsInputInputObject =
  | Extract<keyof TranslatorUpsertWithoutTestsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TestUpdateManyMutationInput {
  request?: string | null
  expected?: string | null
}
export type TestUpdateManyMutationInputInputObject =
  | Extract<keyof TestUpdateManyMutationInput, string>
  | { name: 'request', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  
export interface RunCreateInput {
  id?: string | null
  test?: TestCreateOneWithoutRunsInput
  expected?: string
  actual?: string
  result?: prisma.ResultType
}
export type RunCreateInputInputObject =
  | Extract<keyof RunCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'test', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  | { name: 'actual', alias?: string  } 
  | { name: 'result', alias?: string  } 
  
export interface TestCreateOneWithoutRunsInput {
  create?: TestCreateWithoutRunsInput | null
  connect?: TestWhereUniqueInput | null
}
export type TestCreateOneWithoutRunsInputInputObject =
  | Extract<keyof TestCreateOneWithoutRunsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TestCreateWithoutRunsInput {
  id?: string | null
  translator?: TranslatorCreateOneWithoutTestsInput
  request?: string
  expected?: string
}
export type TestCreateWithoutRunsInputInputObject =
  | Extract<keyof TestCreateWithoutRunsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'translator', alias?: string  } 
  | { name: 'request', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  
export interface RunUpdateInput {
  test?: TestUpdateOneRequiredWithoutRunsInput | null
  expected?: string | null
  actual?: string | null
  result?: prisma.ResultType | null
}
export type RunUpdateInputInputObject =
  | Extract<keyof RunUpdateInput, string>
  | { name: 'test', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  | { name: 'actual', alias?: string  } 
  | { name: 'result', alias?: string  } 
  
export interface TestUpdateOneRequiredWithoutRunsInput {
  create?: TestCreateWithoutRunsInput | null
  update?: TestUpdateWithoutRunsDataInput | null
  upsert?: TestUpsertWithoutRunsInput | null
  connect?: TestWhereUniqueInput | null
}
export type TestUpdateOneRequiredWithoutRunsInputInputObject =
  | Extract<keyof TestUpdateOneRequiredWithoutRunsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TestUpdateWithoutRunsDataInput {
  translator?: TranslatorUpdateOneRequiredWithoutTestsInput | null
  request?: string | null
  expected?: string | null
}
export type TestUpdateWithoutRunsDataInputInputObject =
  | Extract<keyof TestUpdateWithoutRunsDataInput, string>
  | { name: 'translator', alias?: string  } 
  | { name: 'request', alias?: string  } 
  | { name: 'expected', alias?: string  } 
  
export interface TestUpsertWithoutRunsInput {
  update?: TestUpdateWithoutRunsDataInput
  create?: TestCreateWithoutRunsInput
}
export type TestUpsertWithoutRunsInputInputObject =
  | Extract<keyof TestUpsertWithoutRunsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface RunUpdateManyMutationInput {
  expected?: string | null
  actual?: string | null
  result?: prisma.ResultType | null
}
export type RunUpdateManyMutationInputInputObject =
  | Extract<keyof RunUpdateManyMutationInput, string>
  | { name: 'expected', alias?: string  } 
  | { name: 'actual', alias?: string  } 
  | { name: 'result', alias?: string  } 
  
export interface TranslatorSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TranslatorWhereInput | null
  AND?: TranslatorSubscriptionWhereInput[]
  OR?: TranslatorSubscriptionWhereInput[]
  NOT?: TranslatorSubscriptionWhereInput[]
}
export type TranslatorSubscriptionWhereInputInputObject =
  | Extract<keyof TranslatorSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EndpointSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EndpointWhereInput | null
  AND?: EndpointSubscriptionWhereInput[]
  OR?: EndpointSubscriptionWhereInput[]
  NOT?: EndpointSubscriptionWhereInput[]
}
export type EndpointSubscriptionWhereInputInputObject =
  | Extract<keyof EndpointSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TestSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TestWhereInput | null
  AND?: TestSubscriptionWhereInput[]
  OR?: TestSubscriptionWhereInput[]
  NOT?: TestSubscriptionWhereInput[]
}
export type TestSubscriptionWhereInputInputObject =
  | Extract<keyof TestSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RunSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: RunWhereInput | null
  AND?: RunSubscriptionWhereInput[]
  OR?: RunSubscriptionWhereInput[]
  NOT?: RunSubscriptionWhereInput[]
}
export type RunSubscriptionWhereInputInputObject =
  | Extract<keyof RunSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type ResultTypeValues =
  | 'Pass'
  | 'Fail'
  
export type RequestTypeValues =
  | 'GET'
  | 'POST'
  | 'PUT'
  | 'DELETE'
  
export type EndpointOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TestOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'request_ASC'
  | 'request_DESC'
  | 'expected_ASC'
  | 'expected_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type RunOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'expected_ASC'
  | 'expected_DESC'
  | 'actual_ASC'
  | 'actual_DESC'
  | 'result_ASC'
  | 'result_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TranslatorOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'requestFunction_ASC'
  | 'requestFunction_DESC'
  | 'responseFunction_ASC'
  | 'responseFunction_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  